use std::convert::identity;

use relm4::{gtk::{prelude::Cast, traits::GtkWindowExt}, ComponentParts, ComponentSender, SimpleComponent, Controller, Component, ComponentController};

use super::{ExampleApplication, ExampleApplicationWindow};
use crate::components::example::Example;

pub(crate) struct AppModel {
    example: Controller<Example>,
}

#[derive(Debug)]
pub(crate) struct AppWidgets {}

impl SimpleComponent for AppModel {
    type Root = ExampleApplicationWindow;
    type Init = ();
    type Input = ();
    type Output = ();
    // AppWidgets is generated by the macro
    type Widgets = AppWidgets;

    // Initialize the UI.
    fn init(
        _app: Self::Init,
        root: &Self::Root,
        _sender: ComponentSender<Self>,
    ) -> ComponentParts<Self> {
        let example = Example::builder()
            .launch(0)
            .forward(_sender.input_sender(), identity);

        root.set_child(Some(example.widget()));
        let model = AppModel { example };
        // Insert the macro code generation here
        ComponentParts { model, widgets: AppWidgets{ } }
    }

    fn update(&mut self, _msg: Self::Input, _sender: ComponentSender<Self>) {}

    fn init_root() -> Self::Root {
        relm4::main_application().downcast::<ExampleApplication>().unwrap().main_window()
    }
}
